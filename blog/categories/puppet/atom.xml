<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: puppet | service rhysd reload]]></title>
  <link href="http://rhysd.co.nz/blog/categories/puppet/atom.xml" rel="self"/>
  <link href="http://rhysd.co.nz/"/>
  <updated>2014-05-21T21:37:49+12:00</updated>
  <id>http://rhysd.co.nz/</id>
  <author>
    <name><![CDATA[Rhys Davies]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building nagios config with puppet]]></title>
    <link href="http://rhysd.co.nz/blog/2014/05/21/building-nagios-config-with-puppet/"/>
    <updated>2014-05-21T21:23:00+12:00</updated>
    <id>http://rhysd.co.nz/blog/2014/05/21/building-nagios-config-with-puppet</id>
    <content type="html"><![CDATA[<p>Dragging up a half finished post from the past AFAIK its still relevant and no less awesome</p>

<p>Building nagios config with puppet!!1</p>

<!--more-->


<p>This setup uses exported resources and this requires your puppetmaster to be setup to use stored configuration. So we need to turn it on and install puppetdb.</p>

<p><code>bash puppet.conf
[puppetmasterd]
storeconfigs = true
dbadapter = puppetdb
</code></p>

<p>Use the Puppet labis puppetdb module (because its easy and maintained)</p>

<p>puppet module install puppetlabs-puppetdb</p>

<p>or</p>

<p>wget <a href="https://forgeapi.puppetlabs.com/v3/files/puppetlabs-puppetdb-3.0.1.tar.gz">https://forgeapi.puppetlabs.com/v3/files/puppetlabs-puppetdb-3.0.1.tar.gz</a></p>

<p>``` ruby site.pp
 node puppetmaster.rhysd.co.nz
  class { &lsquo;puppetdb::server&rsquo;:</p>

<pre><code>database =&gt; postgres,
database_name     =&gt; puppetdb,
database_username =&gt; 'puppet',
database_password =&gt; 'use_pwgen_you_monkey',
database_host     =&gt; 'localhost',
database_port     =&gt; '5432',
</code></pre>

<p>   }</p>

<p>  class { &lsquo;puppetdb::master::config&rsquo;:</p>

<pre><code>puppetdb_server =&gt; 'puppetmaster.rhysd.co.nz',
puppetdb_port   =&gt; 8081,
puppet_conf =&gt; '/etc/puppet/puppet.conf',
</code></pre>

<p>  }</p>

<p>```
Yes you should use puppet to manage puppet!!!!!!!</p>

<p>Now for the good stuff</p>

<p>``` ruby nagios.pp
class nagios::checks {</p>

<pre><code>  @@nagios_host { $fqdn:
     ensure =&gt; present,
     alias =&gt; $hostname,
     address =&gt; $ipaddress,
     use =&gt; "generic-host",
     target =&gt; "/etc/puppet/modules/nagios/files/host_${::fqdn}.cfg"
  }

  @@nagios_hostextinfo { $fqdn:
     ensure =&gt; present,
     icon_image_alt =&gt; $operatingsystem,
     icon_image =&gt; "base/$operatingsystem.png",
     statusmap_image =&gt; "base/$operatingsystem.gd2",
     target =&gt; "/etc/puppet/modules/nagios/files/host_${::fqdn}.cfg"
  }

  @@nagios_service { "check_ping_${hostname}":
     use =&gt; "check_ping",
     host_name =&gt; "$fqdn",
     target =&gt; "/etc/puppet/modules/nagios/files/host_${::fqdn}.cfg"
  }
</code></pre>

<p>}
<code>
</code> ruby site.pp
node &lsquo;nagios.rhysd.co.nz&rsquo; {
  Nagios_Host &lt;&lt;||>>
  Nagios_Service &lt;&lt;||>>
}
```</p>

<p>This is a basic example setting a nagios host and a ping check. In this each host has its own nagios configation file into the nagios modules file directory.</p>

<p>Where this technique becomes powerful is when you start adding nagios service checks to other modules to mantain total monitoring coverage. RAWR</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Could not autoload puppet/indirector/facts/active_record]]></title>
    <link href="http://rhysd.co.nz/blog/2013/06/23/could-not-autoload-puppet-slash-indirector-slash-facts-slash-active-record/"/>
    <updated>2013-06-23T20:10:00+12:00</updated>
    <id>http://rhysd.co.nz/blog/2013/06/23/could-not-autoload-puppet-slash-indirector-slash-facts-slash-active-record</id>
    <content type="html"><![CDATA[<p>After recently upgrading our puppetmaster to 3.2.2 to mitigate a remote <a href="http://packetstormsecurity.com/files/122076/Puppet-Remote-Code-Execution.html">exploit</a>. I ran into this error on all nodes</p>

<!--more-->


<p><code>
Error: Could not retrieve catalog from remote server: Error 400 on SERVER: Could not autoload puppet/indirector/facts/active_record: no such file to load -- active_record
Warning: Not using cache on failed catalog
Error: Could not retrieve catalog; skipping run
</code></p>

<p>So I&rsquo;m guessing your using stored configs on your puppetmaster. Apparently this is now deprecated as it says at the top of this <a href="http://projects.puppetlabs.com/projects/1/wiki/using_stored_configuration">page</a>.</p>

<p>So the answer is to install and migrate to <a href="http://docs.puppetlabs.com/puppetdb/">PuppetDB</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating local accounts in puppet]]></title>
    <link href="http://rhysd.co.nz/blog/2013/06/22/creating-local-accounts-in-puppet/"/>
    <updated>2013-06-22T11:32:00+12:00</updated>
    <id>http://rhysd.co.nz/blog/2013/06/22/creating-local-accounts-in-puppet</id>
    <content type="html"><![CDATA[<p>Creating local nix accounts in puppet. An easy alternative to a small ldap setup.</p>

<!--more-->


<p><div><script src='https://gist.github.com/5835091.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Pretty nice aye :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet client setup script]]></title>
    <link href="http://rhysd.co.nz/blog/2013/06/21/puppet-client-setup-script/"/>
    <updated>2013-06-21T12:26:00+12:00</updated>
    <id>http://rhysd.co.nz/blog/2013/06/21/puppet-client-setup-script</id>
    <content type="html"><![CDATA[<p>Simple but useful script for setting up puppet on client machines</p>

<!-- more -->


<p><div><script src='https://gist.github.com/5827861.js?file=puppet_client'></script>
<noscript><pre><code>#!/bin/bash

if [ $# == 0 ] ; then
cat &lt;&lt;EOF
Usage: $0 DIST (wheezy,squeeze,lucid) FQDN

EOF
  exit 2
fi

DIST=$1
FQDN=$2
INSTALLED=$(dpkg-query -W --showformat='${Status}\n' puppet | grep &quot;install ok installed&quot;)

if [ &quot;xxx&quot; == &quot;$DIST&quot;&quot;xxx&quot; ];then
 echo Please enter distribution
 exit 1
fi

if [ &quot;xxx&quot; == &quot;$FQDN&quot;&quot;xxx&quot; ]; then
 echo Please enter puppet master fqdn
 exit 1
fi

if [ &quot;xxx&quot; == &quot;$INSTALLED&quot;&quot;xxx&quot; ]; then
  wget http://apt.puppetlabs.com/puppetlabs-release-$DIST.deb
  dpkg -i puppetlabs-release-$DIST.deb
  apt-get update
  apt-get install puppet
  cat - &gt; /etc/puppet/puppet.conf &lt;&lt;EOF
[main]
logdir=/var/log/puppet
vardir=/var/lib/puppet
ssldir=/var/lib/puppet/ssl
rundir=/var/run/puppet
factpath=$vardir/lib/facter
templatedir=$confdir/templates
server=$FQDN
EOF

 else
   echo &quot;Puppet already installed&quot;
fi</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating config with hashes in puppet]]></title>
    <link href="http://rhysd.co.nz/blog/2013/06/19/generating-config-with-hashes-in-puppet/"/>
    <updated>2013-06-19T20:32:00+12:00</updated>
    <id>http://rhysd.co.nz/blog/2013/06/19/generating-config-with-hashes-in-puppet</id>
    <content type="html"><![CDATA[<p>Playing around with puppet today (as always) and stumbled across a sweet pattern in a couple of modules for creating config files from hashes. Particularly good for building overriding config.</p>

<!-- more -->


<p>So here is the template</p>

<p>``` bash mysql.d.cnf.erb</p>

<h3>MANAGED BY PUPPET</h3>

<p>&lt;% @settings.sort.each do |section, content|      &ndash;%>
[&lt;%= section %>]
&lt;%   content.sort.each do |key, values|          &ndash;%>
&lt;%     [values].flatten.sort.each do |value|     &ndash;%>
&lt;%= value == false ? &lsquo;#&rsquo; : &lsquo;&rsquo; %>&lt;%= key &ndash;%>&lt;%=</p>

<pre><code>     case value
     when true, false
       ''
     else
       " = #{value}"
     end
</code></pre>

<p>%>
&lt;%     end                                       &ndash;%>
&lt;%   end                                         &ndash;%></p>

<p>&lt;% end                                           &ndash;%>
```
and now the puppet define</p>

<p>``` bash override.pp
define mysql::server::config ($settings,) {</p>

<p>  file { &ldquo;/etc/mysql/conf.d/${name}.cnf&rdquo;:</p>

<pre><code>ensure  =&gt; file,
content =&gt; template('mysql/mysql.d.cnf.erb'),
owner   =&gt; 'root',
group   =&gt; 'root',
mode    =&gt; '0644',
require =&gt; Package['mysql-server'],
</code></pre>

<p>  }
```</p>

<p>and now the site.pp</p>

<p>``` bash site.pp
 mysql::server::config { &lsquo;dns_repl&rsquo;:</p>

<pre><code> settings =&gt; {
   'mysqld' =&gt; {
     'server-id'             =&gt; '5',
     'query_cache_limit'     =&gt; '5M',
     'query_cache_size'      =&gt; '128M',
     'replicate-do-db'       =&gt; [ 'dns', 'radius' ] 
    }
 }
</code></pre>

<p>  }
```
this will create a file that looks like</p>

<p><code>bash /etc/mysql/conf.d/dns_repl.cnf
   [mysqld]
   server-id = 5
   query_cache_limit = 5M
   query_cache_size = 128M
   replicate-do-db = dns
   replicate-do-db = radius
</code></p>

<p>So this is obviously awesome. Super flexible no need to define each varible you want to add into config. Just add each var to your node definition&hellip;</p>

<p>So far I have used this template style for powerdns and mysql config files but I am sure there are heaps more uses for this style of config generation.</p>

<p>Also first..!1 whoop</p>
]]></content>
  </entry>
  
</feed>
